// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/soerjadi/exam/models"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, pc
func (_m *Repository) Create(ctx context.Context, pc *models.ProductCategory) error {
	ret := _m.Called(ctx, pc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ProductCategory) error); ok {
		r0 = rf(ctx, pc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByCategoryID provides a mock function with given fields: ctx, categoryID
func (_m *Repository) DeleteByCategoryID(ctx context.Context, categoryID int64) error {
	ret := _m.Called(ctx, categoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByProductID provides a mock function with given fields: ctx, productID
func (_m *Repository) DeleteByProductID(ctx context.Context, productID int64) error {
	ret := _m.Called(ctx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCategoryID provides a mock function with given fields: ctx, categoryID
func (_m *Repository) GetByCategoryID(ctx context.Context, categoryID int64) ([]*models.ProductCategory, error) {
	ret := _m.Called(ctx, categoryID)

	var r0 []*models.ProductCategory
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.ProductCategory); ok {
		r0 = rf(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ProductCategory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByProductID provides a mock function with given fields: ctx, productID
func (_m *Repository) GetByProductID(ctx context.Context, productID int64) ([]*models.ProductCategory, error) {
	ret := _m.Called(ctx, productID)

	var r0 []*models.ProductCategory
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.ProductCategory); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ProductCategory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
